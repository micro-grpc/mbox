#
# Makefile for this application
#
-include variable.mak

OK_COLOR=\033[32;01m
NO_COLOR=\033[0m
ERROR_COLOR=\033[31;01m
WARN_COLOR=\033[33;01m

PUB_PORT ?= 9000
PORT ?= 9000

REPO_URL ?= registry.gitlab.com/
IMAGE_NAME ?=
USER_NAME ?=
REPO_BASE_PATH ?= GITLAB_GROUP/GITLAB_PROJECT
ADMIN_USER ?= grengojbo
TAG_VERSION=$(shell cat RELEASE)

OSNAME=$(shell uname)
GO=$(shell which go)

GO_MODULE=on

CUR_TIME=$(shell date '+%Y-%m-%d_%H:%M:%S')
# Program version
VERSION=$(shell cat RELEASE)

# Binary name for bintray
BIN_NAME=$(shell basename $(abspath ./))

# Project name for bintray
PROJECT_NAME=$(shell basename $(abspath ./))
PROJECT_DIR=$(shell pwd)

# Project url used for builds
# examples: github.com, bitbucket.org
REPO_HOST_URL=github.com.org

# Grab the current commit
GIT_COMMIT="$(shell git rev-parse HEAD)"

DIST_DIR="${PROJECT_DIR}/dist"
DIST_BIN="${DIST_DIR}/bin"

NAME ?= ${PROJECT_NAME}
TAG=${REPO_BASE_PATH}/$(PROJECT_NAME):$(TAG_VERSION)

BUILD_TAGS ?= "netgo"
BUILD_TAGS_BINDATA ?= "netgo bindatafs"
BUILD_ENV = GOOS=linux GOARCH=amd64
ENVFLAGS = CGO_ENABLED=1 $(BUILD_ENV)
ifneq ($(GOOS), darwin)
  EXTLDFLAGS = -extldflags "-lm -lstdc++ -static"
else
  EXTLDFLAGS =
endif

GO_LINKER_FLAGS ?= -ldflags '$(EXTLDFLAGS) -s -w \
  -X "main.BuildTime=${CUR_TIME}" \
  -X "main.Version=${VERSION}" \
  -X "main.GitHash=${GIT_COMMIT}" \
  -X "config.Version=${VERSION}"

# Add the godep path to the GOPATH
#GOPATH=$(shell godep path):$(shell echo $$GOPATH)

#ifeq ($(OS),Darwin)
#  URL=$(shell dinghy ip)
#else
#  URL="127.0.0.1"
#endif
URL=$(shell dinghy ip)

PROTO_OUT=${GOPATH}/src
# PROTO_OUT=.

MODIFY=Mgoogle/protobuf/timestamp.proto=github.com/gogo/protobuf/types

default: help

help:
	@echo "..............................................................."
	@echo "Project: $(PROJECT_NAME) | current dir: $(PROJECT_DIR)"
	@echo "version: $(VERSION)\n"
	@echo "make init         - Load Libs for project"
	@echo "make get          - Download modules"
	@echo "make protoc       - Generate gRPC"
	@echo "make build        - Build for current OS project"
	@echo "make release      - Build release project"
	@echo "make docs         - Project documentation"
	@echo "make deploy       - Deploy bin files to server"
	@echo "make update       - Update vendor files"
	@echo "make test         - Run all test"
	@echo "make version      - Current project version"
	@echo "make serve        - Run local Docker container"
	@echo "make shell        - Connect to local Docker container"
	@echo "make stop-docker  - Stop local Docker container"
	@echo "make clean-docker - Clean local Docker image"
	@echo "make build-docker - Build Docker image"
	@echo "make push         - Push Docker image"
	@echo "make publish      - Publication new Release"
	@echo "...............................................................\n"

init:
	@go get -u github.com/golang/dep/cmd/dep
	@go get -u golang.org/x/vgo
	@go get -u google.golang.org/grpc
	@go get -u github.com/golang/protobuf/proto
	@go get -u github.com/gogo/protobuf/{proto,protoc-gen-gogo,gogoproto,protoc-gen-gofast}
	@go get -u github.com/golang/protobuf/protoc-gen-go
	@go get -u github.com/mwitkow/go-proto-validators/protoc-gen-govalidators
	@go get -u github.com/fiorix/protoc-gen-cobra
	@go get -u github.com/infobloxopen/protoc-gen-gorm
	@go get -u github.com/tcncloud/protoc-gen-persist
	@go get -v github.com/micro-grpc/protoc-gen-sqlx
	@#go get -u github.com/zanven42/proto-database-go/protoc-gen-database
	@@GO111MODULE=${GO_MODULE} go get ./...

update:
	@#dep ensure -update
	@GO111MODULE=${GO_MODULE} go get -u ./...

get:
	@GO111MODULE=${GO_MODULE} go get ./...

protoc:
	@echo "Generate gRPC"
	@protoc --proto_path=${GOPATH}/src \
	  --proto_path=${GOPATH}/src/github.com/gogo/protobuf/protobuf \
	  -I=. \
    --gofast_out=${MODIFY},plugins=grpc:${PROTO_OUT}  \
	  --govalidators_out=${MODIFY}:${PROTO_OUT} \
    --sqlx_out=${MODIFY}:${PROTO_OUT} \
    -I=/usr/local/include \
    -I=${GOPATH} \
	  pb/**/*.proto

deploy:
	@echo "TODO"

publish:
	@#./bumper.sh
	@git add -A
	@git commit -am "Bump version to v$(shell cat RELEASE)"
	@git tag v$(shell cat RELEASE)
	@git push --tags
	@git push

release: build-docker
	@echo "Push Docker image: $(REPO_URL)$(TAG) to registry"
	@docker push $(REPO_URL)$(TAG)

clean:
	@test ! -e ./${BIN_NAME} || rm ./${BIN_NAME}
	@test ! -e ${DIST_HOME}/${BIN_NAME} || rm ${DIST_HOME}/${BIN_NAME}
	@#git gc --prune=0 --aggressive
	@find . -name "*.orig" -type f -delete
	@find . -name "*.log" -type f -delete
	@test ! -e ./dist || rm -R ./dist

test:
	@echo "Start test..."

clean-docker:
	docker rmi -f $(REPO_URL)$(TAG)
	docker system prune -f

push:
	docker push $(REPO_URL)$(TAG)

serve:
	@echo "$(OK_COLOR)RUN command line: open http://$(URL):$(PUB_PORT)/$(NO_COLOR)\n\n"
	@docker run --rm \
		--name=$(NAME) \
     	-p=$(PUB_PORT):$(PORT) \
     	-e PORT=$(PORT) \
     	-it $(REPO_URL)$(TAG)

stop-docker:
	docker stop $(NAME)

build-docker:
	@echo "Build Docker image: $(REPO_URL)$(TAG)"
	@test ! -e ${NETRC_FILE} || cp ${NETRC_FILE} ${PROJECT_DIR}/netrc
	@test -e ${NETRC_FILE} || cp ${PROJECT_DIR}/netrc.empty ${PROJECT_DIR}/netrc
	@docker build --build-arg VERSION=${VERSION} --build-arg GIT_COMMIT=${GIT_COMMIT} --build-arg CUR_TIME=${CUR_TIME} --tag=$(REPO_URL)$(TAG) .

# Attach a root terminal to an already running dev shell
shell:
	docker run -it --rm $(REPO_URL)$(TAG) bash

build-linux: clean
	@mkdir -p $(DIST_BIN)
	@echo "building version: ${VERSION} to  ${DIST_HOME}/${BIN_NAME}"
	@GO111MODULE=${GO_MODULE} DB_NAME=$(DB_TEST) DB_USER=$(DB_USER_TEST) DB_PASS=$(DB_PASS_TEST) DB_HOST=$(DB_HOST) GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -a -installsuffix cgo -tags netgo -ldflags "-s -w -X main.release=${VERSION} -X main.Commit=${GIT_COMMIT} -X main.BuildTime=${CUR_TIME}" -o $(DIST_BIN)/$(BIN_NAME) main.go
	@echo " "

build: clean
	@mkdir -p $(DIST_BIN)
	@echo "building version: ${VERSION} to  ${DIST_HOME}/${BIN_NAME}"
	@GO111MODULE=${GO_MODULE} CGO_ENABLED=0 go build -a -installsuffix cgo -tags netgo -ldflags "-s -w -X main.release=${VERSION} -X main.Commit=${GIT_COMMIT} -X main.BuildTime=${CUR_TIME}" -o ./$(BIN_NAME) main.go
	@echo " "

version:
	@echo ${VERSION}

docs:
	godoc -http=:6060 -index

