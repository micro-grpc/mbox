// Package cmd - {{ .RelativeName }} service cli
{{ comment .Copyright }}
{{if .Licenses}}{{ comment .Licenses }}{{end}}

package cmd

import (
	"fmt"

	cl "github.com/micro-grpc/mbox/client"
	l "github.com/micro-grpc/mbox/log"
  "{{ .ProjectDir }}/pb/{{ .PackageName }}"
	log "github.com/sirupsen/logrus"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
	"golang.org/x/net/context"
	// "google.golang.org/grpc"
	// "google.golang.org/grpc/metadata"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
	"time"
  //"encoding/json"
)

// "github.com/sebest/logrusly"

var Client *cl.Client
var Ticker *time.Ticker

var repeat int

var clientCmd = &cobra.Command{
	Use:   "client",
	Short: "client for {{ .ServiceName }}",
	Long:  `client for {{ .ServiceName }} `,
	Run: func(cmd *cobra.Command, args []string) {
		level := l.GetLogLevel(viper.GetString("client.level"))
		log.SetLevel(level)

		if Verbose > 0 {
			fmt.Println("run client for service:", viper.GetString("service.name"), "log level:", level)
		}

		if IsLogrus {
			Logger = log.New()
			Logger.SetLevel(level)
			if isProduction() {
				Logger.Formatter = &log.JSONFormatter{
					// disable, as we set our own
					DisableTimestamp: true,
				}
				// Logger.SetLevel(log.ErrorLevel)
				// LoggerHook = logrusly.NewLogglyHook(viper.GetString("LOGGLY_TOKEN"), "bbox.loggly.com", level, "serviceName", "client")
				// Logger.Hooks.Add(LoggerHook)
				// LoggerHook.Flush()
			} else {
				Logger.Formatter = &log.TextFormatter{}
			}
		}

    addrConsul := viper.GetString("CONSUL_HTTP_ADDR")
    isConsul, _ := cmd.Flags().GetBool("notConsul")
    if isConsul {
      addrConsul = "none"
    }

		options := []cl.ClientOption{
			cl.SetServiceName(viper.GetString("service.name"), viper.GetString("service.namespace"), viper.GetString("client.address"), viper.GetInt("client.port")),
			cl.SetSetting(Verbose, isDebug(), viper.GetBool("client.prom")),
      cl.SetConsul(addrConsul),
			// cl.SetTLS(cmd.tls),
			// cl.SetCAFile(cmd.caFile),
			// cl.SetMaxRetries(cmd.maxRetries),
		}

		if IsLogrus {
			options = append(options, cl.SetLogger(Logger))
		}

		if viper.GetString("auth.schema") == "basic" {
			options = append(options, cl.SetAuthBasic(viper.GetString("auth.login"), viper.GetString("auth.passwd")))
		} else if viper.GetString("auth.schema") == "jwt" || viper.GetString("auth.schema") == "bearer" {
			if Verbose > 2 {
				log.Println("TOKEN", viper.GetString("token"))
			}
			options = append(options, cl.SetAuthJWT(viper.GetString("token")))
		}

		var err error
		Client, err = cl.NewClient(options...)

		if err != nil {
			log.Fatalf("did not connect: %s", err.Error())
		}
		defer Client.Close()


		c := {{ .PackageName }}.New{{ .RelativeName }}ServiceClient(Client.Conn)
		ctx := context.Background()

		cnt := 1
		Ticker = time.NewTicker(2 * time.Second)
		for t := range Ticker.C {
			if repeat > 0 && cnt > repeat {
				Ticker.Stop()
				break
			}

			md := metadata.Pairs(
				"v", ReleaseVersion,
			)
			ctx = metadata.NewOutgoingContext(ctx, md)
			var header, trailer metadata.MD
			grpc.Header(&header)
			grpc.Trailer(&trailer)
			cnt++
			data := cmd.Flag("data").Value.String()

      res, err := c.{{ .RelativeName }}(ctx, &{{ .PackageName }}.Request{Pong: data})
      if err != nil {
        log.Errorln(err.Error())
      } else {
        log.Println("Response from server:", res.Pong, "ticket:", t)
      }

      //res, err := c.Read(ctx, &{{ .PackageName }}.Query{Id: data})
			//if err != nil {
			//	log.Errorln(err.Error())
			//} else {
      //  var row {{ .PackageName }}.{{ .RelativeName }}
      //  json.Unmarshal(res.Data, &row)
			//	log.Printf("Response from server: %s (%v)\n", row.Name, t)
			//}
		}
		defer Ticker.Stop()

		// defer LoggerHook.Flush()
	},
}

func init() {
	rootCmd.AddCommand(clientCmd)

	clientCmd.Flags().String("auth", "none", "Authorization scheme (e.g. `basic`, `bearer`)")
	clientCmd.Flags().String("login", "", "Login for scheme `basic`")
	clientCmd.Flags().String("passwd", "", "Pasword for scheme `basic`")
	clientCmd.Flags().String("address", "{{ .Address }}", "gRPC Server IP address")
	clientCmd.Flags().IntP("port", "p", {{ .Port }}, "gRPC Server Port")
  clientCmd.Flags().Bool("notConsul", false, "disable consul service discovery")
	clientCmd.Flags().BoolP("prom", "", false, "support Prometheus")
	clientCmd.Flags().String("level", "info", "logged level")
	clientCmd.Flags().BoolVar(&IsLogrus, "logrus", false, "Logrus is a structured logger")
	clientCmd.Flags().IntVar(&repeat, "repeat", 0, "number of repetitions if 0 then infinitely")

	clientCmd.Flags().String("name", "{{ .ServiceName }}", "Service Name")
	clientCmd.Flags().String("namespace", "{{ .Namespace }}", "Namespace for the service")
	_ = viper.BindPFlag("service.name", clientCmd.Flags().Lookup("name"))
	_ = viper.BindPFlag("service.namespace", clientCmd.Flags().Lookup("namespace"))

	_ = viper.BindPFlag("auth.schema", clientCmd.Flags().Lookup("auth"))
	_ = viper.BindPFlag("auth.login", clientCmd.Flags().Lookup("login"))
	_ = viper.BindPFlag("auth.passwd", clientCmd.Flags().Lookup("passwd"))
	_ = viper.BindPFlag("client.address", clientCmd.Flags().Lookup("address"))
	_ = viper.BindPFlag("client.port", clientCmd.Flags().Lookup("port"))
	_ = viper.BindPFlag("client.prom", clientCmd.Flags().Lookup("prom"))
	_ = viper.BindPFlag("client.level", clientCmd.Flags().Lookup("level"))

	viper.SetDefault("CONSUL_HTTP_ADDR", "127.0.0.1:8500")
	viper.SetDefault("TOKEN", "")
	viper.SetDefault("LOGGLY_TOKEN", "")

	clientCmd.Flags().String("data", "ping", "send message")
}
