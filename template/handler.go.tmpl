// Package handler - {{ .RelativeName }} service handler
{{ comment .Copyright }}
{{if .Licenses}}{{ comment .Licenses }}{{end}}

package handler

import (
  "{{ .ProjectDir }}/pb/{{ .PackageName }}"
  "golang.org/x/net/context"
  log "github.com/sirupsen/logrus"
  "google.golang.org/grpc/metadata"
  "google.golang.org/grpc"
  "fmt"
  "github.com/micro-grpc/mbox/services/authorize"
)
// ctxtags "github.com/grpc-ecosystem/go-grpc-middleware/tags"

// {{ .RelativeName }}Service - service structure
type {{ .RelativeName }}Service struct {
  Debug bool
  Version string
  Data string
  {{ .PackageName }}.{{ .RelativeName }}ServiceServer
}

// New{{ .RelativeName }}Service - new service
func New{{ .RelativeName }}Service() *{{ .RelativeName }}Service {
  s := &{{ .RelativeName }}Service{}
  return s
}

// Register - register service
func (s *{{ .RelativeName }}Service) Register(srv *grpc.Server)  {
  {{ .PackageName }}.Register{{ .RelativeName }}ServiceServer(srv, s)
}

// {{ .RelativeName }} - function
func (s *{{ .RelativeName }}Service) {{ .RelativeName }}(ctx context.Context, in *{{ .PackageName }}.Request) (res *{{ .PackageName }}.Response, err error)  {
  log.Println("Receive message", in.GetPong(), "debug:", s.Debug)

  header := metadata.Pairs("ver", s.Version)
  grpc.SendHeader(ctx, header)

  trailer := metadata.Pairs("mes", "footer message")
  grpc.SetTrailer(ctx, trailer)

  if len(s.Data) == 0 {
    s.Data = "pong"
  }

  if user, ok := authorize.GetUser(ctx); ok {
    log.Println("USER:", user)
  }
  if organization, ok := authorize.GetTokenParams(ctx, "organization"); ok {
    organizationID, _ := authorize.GetTokenParams(ctx, "organization_id")
    log.Println("organization ID:", organizationID, "name:", organization)
  }
  if olala, ok := ctx.Value("olala").(string); ok {
    fmt.Println("olala:", olala)
  }

  return &{{ .PackageName }}.Response{Pong: s.Data}, nil
}
